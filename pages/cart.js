import React, { useEffect } from 'react';
import Head from "next/head"
import {useSelector} from "react-redux"
import {selectItems} from "../slices/basketSlice"
import {selectTotal} from "../slices/basketSlice"
import Image from 'next/image'
import Currency from "react-currency-formatter"
import { ShoppingBagIcon } from '@heroicons/react/solid';
import CartProduct from '../components/CartProduct';
import Header from '../components/Header';
import SmallHeader from '../components/SmallHeader';
import MainHeader from '../components/MainHeader';
import {useRouter} from "next/router"
import {useState} from "react"
import AccountModal from '../components/AccountModal';
import HelpModal from '../components/HelpModal';
import { PayPalButtons, PayPalScriptProvider, usePayPalScriptReducer } from '@paypal/react-paypal-js';

const Cart = () => {
  const items = useSelector(selectItems)
  const total = useSelector(selectTotal)
  const router = useRouter()
  const [close, setClose] = useState(true)
  const [modal, setModal] = useState(true)
  const [show, setShow] = useState(false)
    const amount = "2"
    const currency = "USD"
    const style = { "layout": "vertical" }
     const ButtonWrapper = ({ currency, showSpinner }) => {
    // usePayPalScriptReducer can be use only inside children of PayPalScriptProviders
    // This is the main reason to wrap the PayPalButtons in a new component
    const [{ options, isPending }, dispatch] = usePayPalScriptReducer();

    useEffect(() => {
        dispatch({
            type: "resetOptions",
            value: {
                ...options,
                currency: currency,
            },
        });
    }, [currency, showSpinner]);


    return (<>
            { (showSpinner && isPending) && <div className="spinner" /> }
            <PayPalButtons
                style={style}
                disabled={false}
                forceReRender={[amount, currency, style]}
                fundingSource={undefined}
                createOrder={(data, actions) => {
                    return actions.order
                        .create({
                            purchase_units: [
                                {
                                    amount: {
                                        currency_code: currency,
                                        value: amount,
                                    },
                                },
                            ],
                        })
                        .then((orderId) => {
                            // Your code here after create the order
                            return orderId;
                        });
                }}
                onApprove={function (data, actions) {
                    return actions.order.capture().then(function () {
                        // Your code here after capture the order
                    });
                }}
            />
        </>
    );
}

  return (
      <div className="bg-gray-200 h-screen w-screen overflow-x-hidden">
        <Head>
          <title>Jumia Kenya | Online Shopping for Groceries, Electronics, Households, Clothings, Foods and so much more</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <SmallHeader />
      <MainHeader setClose={setClose} modal={modal} setModal={setModal} close={close}/>
      {!close && <AccountModal />}
      {!modal && <HelpModal />}
        <main className="flex flex-col my-4 max-w-5xl mx-auto ">
        <p className="text-gray-900 text-md font-bold p-4">Items &nbsp;({items.length})</p>
        {items.length == 0 ?
          <div className="flex flex-col content-between items-center p-6 gap-y-6 bg-white rounded-md shadow-md">
            <ShoppingBagIcon className="h-20 w-auto text-gray-200"/>
            <p className="text-md text-gray-700">Your shopping Cart is empty</p>
            <button onClick={() => router.push("/")} className="button mt-4">View Our Products</button>
          </div> : 
        items.map((item, i) => (
          <CartProduct 
            key={i}
            id={item.id}
            image={item.image}
            price={item.price}
            title={item.title}
          />
        ))
        }
        <div className="flex flex-col bg-white p-5 shadow-md max-w-5xl mx-auto mt-4">
          {items.length > 0 && (
            <>
                <h2 className="whitespace-nowrap">Subtotal ({items.length} items:{""})
                    <span className="font-bold">
                        <Currency quantity={total} currency="KES"/>
                    </span>
                </h2>
              
               {show ? (<PayPalScriptProvider
                    options={{
                        "client-id": "AXnJUTu3Zs_H9FsnEbArVcFWnUZMQPyU7-x1KdO77-tv6-ELtQVDkplTYTNl3nY1OA8_Rj1y6Ihkd_XM",
                        components: "buttons",
                        currency: "USD",
                        "disable-funding": "credit,card,p24",
                    }}
                >
				        <ButtonWrapper
                    currency={currency}
                    showSpinner={false}
                />
              </PayPalScriptProvider>) : (
                <button onClick={() => setShow(true)} role="link" className="button mt-2">Sign In to Checkout</button>
              )}
            </>
          )}
        </div>
        </main>
      </div>
    );
};

export default Cart;

